name: "Deploy CloudFormation Stacks"
description: "Deploy CloudFormation stacks with hash-based lambda version support"

inputs:
  role-to-assume:
    description: "Full ARN of the IAM role to assume for deployment"
    required: true
  region:
    description: "AWS region for deployment"
    required: false
    default: "eu-central-1"
  config-file:
    description: "Path to the stacks configuration file (stacks.yaml)"
    required: true
  lambda-function-name:
    description: "Name of the Lambda function to call for deployment (for lambda-based deployment)"
    required: false
  environment:
    description: "Deployment environment (development, staging, production)"
    required: false
  stack-name:
    description: "Specific stack name to deploy (optional)"
    required: false
  command:
    description: "Command to run (deploy, dump, dump_graph)"
    required: false
    default: "deploy"

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        aws-region: ${{ inputs.region }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install boto3 networkx pyyaml

    - name: Deploy CloudFormation stacks
      shell: bash
      run: |
        # Build command based on inputs
        CMD="python ${{ github.action_path }}/deploy_with_lambda_call.py ${{ inputs.command }}"
        
        # Add lambda function name if provided (for lambda-based deployment)
        if [ -n "${{ inputs.lambda-function-name }}" ]; then
          CMD="$CMD ${{ inputs.lambda-function-name }}"
        fi
        
        # Add config file
        CMD="$CMD ${{ inputs.config-file }}"
        
        # Add optional stack name
        if [ -n "${{ inputs.stack-name }}" ]; then
          CMD="$CMD --stack-name ${{ inputs.stack-name }}"
        fi
        
        echo "Executing: $CMD"
        eval "$CMD"
