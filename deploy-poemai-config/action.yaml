name: 'Deploy poemai Config'
description: 'Deploy poemai configuration files via Lambda'
author: 'poemAI-ch'

inputs:
  environment:
    description: 'Environment to deploy to (production, staging, development)'
    required: true
  lambda-function-name:
    description: 'Name of the Lambda function to invoke for deployment'
    required: true
  role-to-assume:
    description: 'ARN of the AWS IAM role to assume'
    required: true
  aws-region:
    description: 'AWS region'
    required: false
    default: 'eu-central-2'
  project-root-path:
    description: 'Path to the project root containing environments/ directory'
    required: false
    default: '.'
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.12'
  version-id:
    description: 'Optional version identifier to associate with the configuration objects'
    required: false
    default: ''
  temporary-corpus-key:
    description: 'Optional: Deploy to a temporary corpus key with TTL (format: TEMP_12345 or auto-generated if set to "auto")'
    required: false
    default: ''
  temporary-corpus-key-ttl-hours:
    description: 'TTL for temporary corpus key in hours'
    required: false
    default: '24'
  test-bot-url-template:
    description: 'Optional: Jinja2 URL template for the test bot (e.g., "https://app.staging.poemai.ch/ui/town_bot/app/{corpus_key}/")'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        aws-region: ${{ inputs.aws-region }}

    - name: Install dependencies
      shell: bash
      run: |
        pip install boto3 pyyaml

    - name: Deploy configuration via Lambda
      shell: bash
      run: |
        echo "🚀 Deploying poemai configuration..."
        echo "  Environment: ${{ inputs.environment }}"
        echo "  Lambda function: ${{ inputs.lambda-function-name }}"
        echo "  Project root: ${{ inputs.project-root-path }}"
        
        if [ -n "${{ inputs.temporary-corpus-key }}" ]; then
          if [ "${{ inputs.temporary-corpus-key }}" = "auto" ]; then
            echo "  🧪 Temporary deployment: Auto-generated corpus key"
          else
            echo "  🧪 Temporary deployment: ${{ inputs.temporary-corpus-key }}"
          fi
          echo "  ⏰ TTL: ${{ inputs.temporary-corpus-key-ttl-hours }} hours"
        fi
        echo ""
        
        COMMIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        VERSION_ID="${{ inputs.version-id }}"
        if [ -z "$VERSION_ID" ]; then
          VERSION_ID="$COMMIT_SHORT"
        fi
        
        python ${{ github.action_path }}/deploy_config_with_lambda_call.py \
          --environment "${{ inputs.environment }}" \
          --lambda-function-name "${{ inputs.lambda-function-name }}" \
          --project-root-path "${{ inputs.project-root-path }}" \
          --version-id "$VERSION_ID" \
          --temporary-corpus-key "${{ inputs.temporary-corpus-key }}" \
          --temporary-corpus-key-ttl-hours "${{ inputs.temporary-corpus-key-ttl-hours }}" \
          --test-bot-url-template "${{ inputs.test-bot-url-template }}"
        
        if [ -n "${{ inputs.temporary-corpus-key }}" ]; then
          echo "🧪 Temporary bot deployment completed - will auto-expire in ${{ inputs.temporary-corpus-key-ttl-hours }} hours"
        else
          echo "✅ Configuration deployment completed successfully!"
        fi

branding:
  icon: 'upload-cloud'
  color: 'blue'
